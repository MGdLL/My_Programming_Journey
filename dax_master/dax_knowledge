
-- Table: x1, x2...
-- Column: y1, y2...
-- Row: z1, z2...
-- Remember in DAX you use double quotes (")
-- Context of row, query and filter


--- INTRODUCTION TO DAX IN POWER BI

-- SUM() (adds all the numbers in a column)
SUM(y1)

-- LEFT() (returns the specified number of characters from the star of a text)
LEFT('texthere', 4) = "text"

-- ITERATIVE FUNCTION (they are a normal calculation followed by an X)(is like a normal calculation, average sum etc. 
but it allows to insert a previous calculation, so you don't have to create another column with that calculation) 
(ONLY FOR MEASURES)
SUMX(Sales, Sales[Price] + (Sales[Price] * Sales[Tax]));

-- FILTER (Expression: a measure or calculation to be evaluated. Must return a single value. 
Filters need to evaluate as a table) (FILTERS COLUMNS, NOT MEASURES)
CALCULATE(<expression>[, <filter1> [, <filter2> [, ...]]]);
CALCULATE(SUM(Sales), Sales[Region]="EMEA");

-- VAR (to assign a name to a calculation that allows to works with it later in the same formula more efficiently)
VAR name1 = CALCULATE (
  SUM (x[y1] ),
  FILTER ( x, x[y2] = 'text')
RETURNS DIVIDE (name1 / another calculation);

-- DATE AND TIME
YEAR(<date>)
QUARTER(<datetime>)
MONTH(<datetime>)

-- FORMAT (to change the format. there are a lot of options)
FORMAT(<date>,<"dddd">)

-- CALENDAR AUTO (returns a table with a single column 'date'that automatically takes the earliest
and latest date in the model and internally calls CALENDAR()) (12, from january to december)
CALENDARAUTO (12)

--DATEDIFF (returns the interval between two dates) (can be in day, month, year...)
DATEDIFF = (date1, date2, day)



---- DAX FUNCTIONS IN POWER BI

-- CALENDAR (like calendar auto, but not auto)
CALENDAR(start_date>, end_date>)

--SUBSTITUTE (replaces existing text with new text in a string)
SUBSTITUTE(<text>, <old_text>, <new_text>, <instance_num>)

-- RANKX (as rank but you can enter a calculation. Rank is used to give a number taking into account 
the maximum value of the field that you want)(in this case you want to show all y1 but ordered by y2 value)
RANKX(ALL(x,y1),y2)

--- FILTERING
--CALCULATE (ignores ALL kind of filtering (page, graph,etc.) and just returns what you complete in the formulaÂ´s filter)
CALCULATE(<expression>,<filter1>,[<filter2>[, ...]])

-- FILTER (returns a filtered table)
FILTER(<table>, <filter>)

-- FILTERING INTERATING FUNCTIONS (you can filter a field and then do a calculation with them, 
so you do not have to create an intermediate function)
SUMX(FILTER(x,y1="text"),y1-y2)


--- COUNTING
COUNT(<column>)Returns the amount of rows with numbers, dates, or strings in a column
COUNTA(<column>)Returns the amount of rows with numbers, dates, strings, or booleans in a column
COUNTBLANKS(<column>)Returns the amount of blank rows
DISTINCTCOUNT(<column>)Returns the amount of distinct values in a column
COUNTROWS(<table>)Returns the amount of rows with numbers, dates, and strings in a table (THIS ONE WORKS WITH ONLY TABLES
SO IF YOU WANT TO FILTER IT, YOU MUST USE FILTER EXPRESSION, NOT CALCULATE)



---- INTERMEDIATE IN DAX WITH POWER BI

--- LOGICAL FUNCTIONS

-- IF
IF(<logical_test (y1=2)>, <value_if_true (True)>, <value_if_false (False)>)

-- AND(), OR(), NOT()
AND(<logical1>,<logical2>) --- AND(5 < 4, 5 < 6) = AND(FALSE, TRUE) = FALSE (returns true if both conditions are true)
OR(<logical1>,<logical2>) --- OR(5 < 4, 5 < 6) = OR(FALSE, TRUE) = TRUE (returns true if at least one is true)
NOT(<logical>) --- NOT(OR(5 < 4, 5 < 6)) = NOT(TRUE) = FALSE (changes true to flase and viceversa)

-- SWITCH (as IF, but more complex)
SWITCH(<expression>, <value>, <result>[, <value>, <result>] ... [, <else>])
Performance = SWITCH(TRUE, 
              [Total_Sales] < 25 000, "Poor",
              [Total_Sales] < 50 000, "Below expectations",
              [Total_Sales] < 75 000, "Above expectations",
              "Exceptional")


--- ROW LEVEL SECURITY (RLS)
-- USERPRINCIPALNAME() (you do not nedd to add anything between the parentheses)
USERPRINCIPALNAME()


--- TABLE MANIPULATION FUNCTIONS
-- DISTINCT (removes duplicate rows from a table or valuesa from a column)
DISTINCT(<table> | <table>)

-- SELECT COLUMNS (returns the selected columns from another table as a new table)
SELECTCOLUMNS(<table>, <name>, <expression>)

-- ADD COLUMNS (returns the input table appended with the selected columns from another table)
ADDCOLUMNS(<table>, <name>, <expression>)
ADDCOLUMNS(Fact_table,           
          "Profit",           
          Revenue - Costs)


-- SUMMARIZE (returns a summary table for the requested totals over a set of groups)
SUMMARIZE(<table>,         
          <groupBy_columnName>,          
          <name>,          
          <expression>)

Best practice is to wrap ADDCOLUMNS()around SUMMARIZE() when creating newcolumns
ADDCOLUMNS(    
      SUMMARIZE(Amounts,               
                Amounts[Year],               
                Amounts[Category]),    
      "Total Amount",    
      SUM(Amounts[Amount]))

You can also filter
FILTER(
     SUMMARIZE(Amounts,               
                Amounts[Year],               
                Amounts[Category]),
      Amounts[Year]=2000)


--- TIME INTELLIGENCE FUNCTIONS
