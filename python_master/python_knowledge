
# you use "#" for writing annotations
# Remember, = in Python means assignment, it doesn't test equality!

# FUNCTIONS

  print() 
  #to launch the function inside the parenthesis
  
  type()
  # to know the type of variable (sting, boolean...).
  
  str(), int(), float(), bool(), list()
  # to transform the variable into a string, integer, float number or boolean.
  # For adding strings with integers, first you need to transform those integers in strings like:
    #print("I started with $" + str(savings) + " and now have $" + str(total_savings) + ". Awesome!")
    # Result: I started with $100 and now have $150. Awesome!


#INDEX

# Print out the weight at index 50
print(np_weight_lb[50])

# Print out sub-array of np_height_in: index 100 up to and including index 110
print(np_height_in[100:110])


# LISTS & SUBLISTS
# you can enter whatever type of variable inside and mix them. You must use [] 
# Here is an example of a list with a sublist

fam=[[1.86, 'dad'], [1.67, 'mom']]

  # SUBSETTLING LISTS - to select a specific variable inside your list
  # The first value counts as 0, so if you want the 5th value you must put 4

  fam = [1.86, 'dad', 1.67, 'mom']
  fam2 = fam [2] ---> 1.67
  fam2 = fam [-3] ---> 'dad'

  # LIST SLICING - to select multiple values inside your list. They return all values between the positions you give them
  fam [start:end] 
  fam2 = fam [1:3] ---> 'dad', 1.67,'mom
  # you can omit the ¨start¨ and it will understand that the series must start at the first value. The same with omitting the ¨end¨ but it will continue until the end
  fam [:1] --> 1.86 ,dad

  #you can use it also to COPY A LIST so you can make other changes without compromising the original table:
  areas = [11.25, 18.0, 20.0, 10.75, 9.50]
  areas_copy = list(areas) #this change creates a copy of the table "areas", so the next change does not apply to the original but only to areas_copy
  areas_copy[0] = 5.0
  # if you use areas_copy=areas, all subsequent changes would affect to the original table "areas" SO DO NOT DO IT THIS WAY

  
  #LIST CALCULATIONS
  fam2=(fam[1]+fam[3]) ---> 'dadmom'

  #CHANCHING LIST ELEMENTS - for changing elements in your list
  fam = [1.86, 'dad', 1.67, 'mom']
  fam [1] = 'daddy'
  fam = [1.86, 'daddy', 1.67, 'mom']

  #ADDING LIST ELEMENTS
  fam = [1.86, 'dad', 1.67, 'mom']
  fam_ext = fam + ['me',1.67]
  fam_ext = [1.86, 'daddy', 1.67, 'mom','me',1.67]

  #DELETING LIST ELEMENTS - for deleting a specific element on your list using the index. You cannot use negative indexing or ":" for selecting more elements at once
  fam = [1.86, 'dad', 1.67, 'mom']
  fam_ext= del fam[2]
  fam_ext = [1.86, 'daddy', 'mom','me',1.67]

  #COPYING LISTS - Simply using the equals sign (=) copies the reference to the list, not the actual list. To create an independent copy, use the list() function or slicing:
  y = list(x)  # or x[:]



#FUNCTIONS & METHODS
#FUNCTIONS - formulas already made for calculating using python. Can be used for all types of elements
max()
pow() #calculate una potencia (base y exponente)
round()

#METHODS - only can be used for specific types of elements
#List methods - example: INDEX - find the index of an specific element
['liz', 1.73, 'emma', 1.68, 'mom', 1.71, 'dad', 1.89]
fam.index("mom") 
4



#PACKAGES -to inport a package that allows you to do specific calculations. Write the package before de spacific calculation using brackets to refer to the kist that you want to change.

import numpy as np
areas_sample= np.array(areas)





