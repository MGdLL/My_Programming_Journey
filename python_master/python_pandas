##REMEMBER

"" - for columns and rows
[] - for frames
() - for series

#CREATE AN INDEX
  pop = [30.55, 2.77, 39.21]
  countries = ["afghanistan", "albania", "algeria"]
  ind_alb = countries.index("albania")
  print(ind_alb)
  --
  1
  
  print(pop[ind_alb])
  --
  2.77

#CREATE A DICTIONARY
  # Definition of countries and capital
  countries = ['spain', 'france', 'germany', 'norway']
  capitals = ['madrid', 'paris', 'berlin', 'oslo']
  
  # From string in countries and capitals, create dictionary europe. REMEMBER TO USE SPACES BETWEEN THE COMPONENTS OF THE DICTIONARY
  europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }

  # Print europe
  print(europe)

#PRINT KEYS (e.g.countries) & VALUES (e.g.capitals) OF THE DICTIONARY
  #KEYS
  capitals=europe.keys()
  print(capitals)
  
  #VALUE
  print(europe['norway'])


#CHANGING DICTIONARIES

  #ADD VALUES TO THE DICTIONARY - Remember KEYS goes with the []
  europe['italy']='rome'
  
  #MODIFY VALUES FROM THE DICTIONARY - same as adding new values but "sobreescribiendo"el value del key que te interesa
  europe['italy']='hi'
  
  #DELETE VALUES FROM THE DICTIONARY
  del(europe['australia'])


#SUBDICTIONARIES
  # Dictionary of dictionaries
  europe = { 'spain': { 'capital':'madrid', 'population':46.77 },
             'france': { 'capital':'paris', 'population':66.03 },
             'germany': { 'capital':'berlin', 'population':80.62 },
             'norway': { 'capital':'oslo', 'population':5.084 } }
  
  
  # Print out the capital of France
  print(europe['france'])
  
  # Create sub-dictionary data - CREATE SUBDICTIONARY
  data = {'capital':'rome', 'population':59.83}
  
  # Add data to europe under key 'italy' - ADD SUBDICTIONARY DATA TO A DICTIONARY
  europe['italy']=data
  
  # Print europe
  print(europe)
  ---
  europe = { 'spain': { 'capital':'madrid', 'population':46.77 },
               'france': { 'capital':'paris', 'population':66.03 },
               'germany': { 'capital':'berlin', 'population':80.62 },
               'norway': { 'capital':'oslo', 'population':5.084 },
               'italy':{'capital':'rome', 'population':59.83}}



#PANDAS
## DICTIONARY DATA FRAME WITH PANDAS. Pandas is an open source library, providing high-performance, easy-to-use data structures and data analysis tools for Python. 

#CREATE A DICTIONARY AND DATA FRAME
  # Import pandas as pd
  import pandas as pd
  
  # Create dictionary my_dict with three key:value pairs: my_dict
    import pandas as pd
    names = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']
    dr = [True, False, False, False, True, True, True]
    cpc = [809, 731, 588, 18, 200, 70, 45]
    my_dict = {'country': names, 'drives_right': dr, 'cars_per_cap': cpc}
  
  # Build a DataFrame cars from my_dict: cars
  cars=pd.DataFrame(my_dict)
  
  # Print cars
  print(cars)

#SPECIFY ROW LABELS
  # Definition of row_labels
  row_labels = ['US', 'AUS', 'JPN', 'IN', 'RU', 'MOR', 'EG']
  
  # Specify row labels of cars
  cars.index = row_labels
  
  # Print cars again
  print(cars)

#IMPORT A CSV AS A DATA FRAME
  # Import pandas as pd
  import pandas as pd
  
  # Import the cars.csv data: cars
  cars=pd.read_csv('cars.csv')
  
  #If you want the first column to be your index
  cars = pd.read_csv('cars.csv', index_col=0)

#SELECT COLUMNS AND ROWS ON DATAFRAMES
  #Single square brackets ([]) return a Pandas Series.
  #Double square brackets ([[]]) return a Pandas DataFrame.

  #SERIES - If you use brackes as in numpy to select an specific column of a data frame you could get a series
  print(cars['country']) - select columns and create a series
  print(cars[0:3]) - select rows and create a series. REMEMBER HERE WILL SHOW YOU THE ROW 1,2 & 3!!!!!!

  #DATAFRAME - to select specific rows and columna and maintain the dataframe structure you must use doubel brackets or loc.or iloc
  print(cars[['country']]) - select columns and create a dataframe
  print(cars[3:6]) - select rows and create a data frame. REMEMBER HERE WILL SHOW YOU THE ROW 4,5 & 6!!!!!!
  datacamp.iloc[[1, 2], [2]] - select ROW 2 & 3!!! (is different than using ':') AND COLUMN 3!!! (REMEMBER INDEX DOES NOT COUNT AS A COLUMN)
  -or-

  print(cars.loc['MOR', 'drives_right']) - prints row morocco and column drive_right
  print(cars.loc[['RU', 'MOR'], ['country', 'drives_right']]) - for more rows and columns. IT IS CALLED SUBDATAFRAME!!
  print(cars.loc[:, ['drives_right']]) - prints ONLY column drives_right
  print(cars.loc[:,['cars_per_cap', 'drives_right']]) - prints ONLY these two columns



#OPERATORS

  #COMPARISON OPERATORS
  >,<,>=,<=,!=, ==
 
  #BOOLEAN OPERATORS (AND, OR)
  import numpy as np
  my_house = np.array([18.0, 20.0, 10.75, 9.50])
  print(np.logical_or(my_house > 18.5, my_house < 10))
  
  #CONDITIONAL STATEMENTS (IF, ELIF, ELSE)

  #IF
    z = 5
    if z % 2 == 0 : #this checks if the number z is even
      print("z is even")
    ---
    z is even

  #ELIF & ELSE
    area = 10.0
    if(area < 9) :
        print("small")
    elif(area < 12) :
        print("medium")
    else :
        print("large")
    ---
    medium

  #SUBSET IN PANDAS
  is_huge = brics["area"] > 8
  brics[is_huge] - we create a subtet with an specific condition

  brics[brics["area"] > 8] - is the same as the previous line but condensed

  brics[np.logical_and(brics["area] > 8, brics["area"] < 10)] - using boolean operators


    pregunta chat gpt pro los diferentes tipos de datos que hay aquÃ­
    # Import cars data
    import pandas as pd
    cars = pd.read_csv('cars.csv', index_col = 0)
    
    # Create car_maniac: observations that have a cars_per_cap over 500
    cpc = cars["cars_per_cap"]
    many_cars = cpc > 500
    car_maniac = cars[many_cars]
    
    # Print car_maniac
    print(car_maniac)


  #WHILE - another operator
    # Initialize offset
     offset = -6
    
    # Code the while loop
    while offset != 0 :
        print("correcting...")
        if offset > 0 :
            offset = offset - 1
        else :
            offset = offset + 1
        print(offset)

  # FOR
    # USING NORMAL FOR
      fam = [1.73, 1.68, 1.71, 1.89]
      for height in fam : 
          print(height)

    # USING FOR WITH AN INDEX
      fam = [1.73, 1.68, 1.71, 1.89]
      for index, height in enumerate(fam) :
          print("person " + str(index) + ": " + str(height))
      ------
      room 0: 11.25
      room 1: 18.0
      room 2: 20.0
      room 3: 10.75
      room 4: 9.5
      
    #if you want to delete row 0 and move one row, write:
      # areas list
      areas = [11.25, 18.0, 20.0, 10.75, 9.50]
      # Code the for loop
      for index, area in enumerate(areas) :
          print("room " + str(index + 1) + ": " + str(area))
      ---
     kitchen 2 : 11.25
    

    #LOOP OVER LIST OF LISTS
      # house list of lists
      house = [["hallway", 11.25], 
               ["kitchen", 18.0], 
               ["living room", 20.0], 
               ["bedroom", 10.75], 
               ["bathroom", 9.50]]
               
      # Build a for loop from scratch
      for x in house : 
          print("the " + x[0] + " is " + str(x[1]) +" sqm")
      ----
      the hallway is 11.25 sqm
      the kitchen is 18.0 sqm
      the living room is 20.0 sqm
      the bedroom is 10.75 sqm
      the bathroom is 9.5 sqm

    #LOOP DATA STRUCTURES

      # ITERATE OVER ALL ELEMENT IN A NUMPY ARRAY (2d numpy array) - we use np.nditer formula
        for x in np.nditer(np_baseball) :
          print(x)        
      
      # ITERATE OVER KEY-VALUE (dictionary) - we use key value items formula
        for key, value in dictionary.items():
        print(key, value)
  
        example:
        ------
        europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin',
                  'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'austria':'vienna' }
  
        for key, value in europe.items() :
            print("the capital of " + key + " is " + str(value))
        ----
        the capital of spain is madrid
        the capital of france is paris
        the capital of germany is berlin
        the capital of norway is oslo
        the capital of italy is rome
        the capital of poland is warsaw
        the capital of austria is vienna
      
    # ITERATE OVER PANDAS DATAFRAMES
      for lab, row in brics.iterrows() :
        ...

        example
        ---
        # Import cars data
        import pandas as pd
        cars = pd.read_csv('cars.csv', index_col = 0)
        
        # Iterate over rows of cars
        for lab, row in cars.iterrows():
            print(lab)
            print(row)

      ---
      for lab, row in cars.iterrows() :
      print(lab + ": " + str(row['cars_per_cap']))


