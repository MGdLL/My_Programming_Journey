--- JOINING DATA

-- INNER JOIN. (left) (only shows the values of the left table that matches the values of the right, 
all the rest dissapears, including the ones from the left that does not match any of the right values) 
(x1 is the LEFT table, x2 the right)(y1 and y2 must be equivalent)(you can use USING instead of ON if 
the name of both columns are the same) (if you aliased a table you must use the alias name on the SELECT line)
  
  SELECT 1.y1, 1.y2, 2.y2, y3
  FROM X1 AS 1
  INNER JOIN X2 AS 2
  ON 1.y1 = 2.y3
  WHERE 1.y1=1;
  
  SELECT 1.y1, 1.y2, 2.y2, y3
  FROM X1 AS 1
  INNER JOIN X2 AS 2
  USING (y1)
  WHERE 1.y1=1
  ORDER BY 1.y1;

  (you can inner join several tables)
  SELECT 1.y1, 1.y2, 2.y2, y3
  FROM X1 AS 1
  INNER JOIN X2 AS 2
  USING (y)
  INNER JOIN X3 AS 3
  USING (y);

-- LEFT JOIN (takes all values from the left table and searches for their matches on the right table. If it does not find a match value,
it still mantains the value of the left but writes 'null' on the column that came from the right table)
  SELECT 1.y1, 1.y2, 2.y2, y3
  FROM X1 AS 1
  LEFT JOIN X2 AS 2
  ON 1.y1 = 2.y3
  WHERE 1.y1=1;

-- RIGHT JOIN (exactly the same as LEFT JOIN but viceversa. You can change the order of the tables and get exactly the same)
 
-- FULL JOIN (takes all values from both tables. It then complete with 'null' those cells that does not have values for some columns)
  SELECT 1.y1, 1.y2, 2.y2, y3
  FROM X1 AS 1
  FULL JOIN X2 AS 2
  ON 1.y1 = 2.y3
  WHERE 1.y1=1;

-- CROSS JOIN (takes each value from each column from the first table and cross them with each value from each column from the second table. 
If we have 2 values in the first table and 4 in the second we would end with 8 values. Works kind like Mendel Peas)
(We do not use USING or ON here)
  SELECT y1, y2
  FROM x1
  CROSS JOIN x2;
Example: "look at possible combinations of languages that COULD HAVE BEEN spoken in the two countries given their history"


