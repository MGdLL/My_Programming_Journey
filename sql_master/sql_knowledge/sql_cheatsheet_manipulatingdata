--- TOPICS
-- CASE statements
-- Simple subqueries
-- Correlated subqueries
-- Window functions 

-- CASE (to create a new column whose statement is: if something is x, then y)
  SELECT y,
  CASE  WHEN y = 1  AND y2>1 THEN 'a'      
        WHEN y = 2 AND y2>1 THEN 'b'     
        ELSE 'c' END AS new_column
  FROM x
  WHERE y2=2
  GROUP BY new_column;

  -- you can also enter CASE uses inside WHERE clause
    SELECT *
    FROM x
    WHERE 
        CASE WHEN y > 5 THEN 'Keep'
             WHEN y <= 5 THEN 'Exclude' END = 'z';

  -- you can also use other functions before CASE clause for returning different values to your new column
    SELECT y1, y2,
    COUNT(CASE WHEN y1 = 8650 AND y2 > y3 
          THEN 'z1' END) AS name1,
    COUNT(CASE WHEN y1 = 8650 AND y2 > y3 
          THEN 'z1' END) AS name2,
    FROM x
    GROUP BY name1;

    SELECT y1, y2,
    AVG(CASE WHEN y1 = 8650 AND y2 > y3 
          THEN 'z1' END) AS name1,
    AVG(CASE WHEN y1 = 8650 AND y2 > y3 
          THEN 'z1' END) AS name2,
    FROM x
    GROUP BY name1;

    SELECT y1, y2,
    ROUND(AVG(CASE WHEN y1 = 8650 AND y2 > y3 
          THEN 'z1' END) AS name1,
    ROUND(AVG(CASE WHEN y1 = 8650 AND y2 > y3 
          THEN 'z1' END) AS name2,
    FROM x
    GROUP BY name1;


-- SUBQUERIES (when you do not want to mix data between tables 
-- but you need to filter based in data that there is in another table)

  -- WHERE Subqueries (it can only returns one column)
    SELECT y1
    FROM x1
    WHERE y2 NOT IN
         (SELECT DISTINCT y1  FROM x2); 

  -- FROM Subqueries (it can returns more columns)
    SELECT DISTINCT monarchs.continent, sub.most_recent
      FROM monarchs,        
        (SELECT continent, MAX(indep_year) AS most_recent
        FROM states
        GROUPBY continent) AS sub
      WHERE monarchs.continent = sub.continent     
      ORDER BY continent;

  -- SELECT (to create another column and creatign a new value by joining two tables
  -- You need to add your filter both in the main query and th esubquery!)
    SELECT 
    	l.name AS league,
        -- Select and round the league's total goals
        ROUND(AVG(m.home_goal + m.away_goal),2) AS avg_goals,
        -- Select and round the average total goals
        (SELECT ROUND(AVG(home_goal + away_goal),2) 
         FROM match
         WHERE season = '2013/2014') AS overall_avg
    FROM league AS l
    LEFT JOIN match AS m
    ON l.country_id = m.country_id
    -- Filter for the 2013/2014 season
    WHERE m.season = '2013/2014'
    GROUP BY l.name;


    SELECT 
    	-- Select the stage and average goals from the subquery
    	s.stage,
        ROUND(s.avg_goals,2) AS avg_goals
    FROM 
    	-- Select the stage and average goals in 2012/2013
    	(SELECT
             stage,
             AVG(home_goal + away_goal) AS avg_goals
         FROM match
         WHERE season = '2012/2013'
         GROUP BY stage) AS s
    WHERE 
    	-- Filter the main query using the subquery
    	s.avg_goals > (SELECT AVG(home_goal + away_goal) 
                       FROM match WHERE season = '2012/2013');



-- CORRELATED QUERIES

SELECT
	-- Select the season and max goals scored in a match
	season,
    max(home_goal + away_goal) AS max_goals,
    -- Select the overall max goals scored in a match
   (SELECT max(home_goal + away_goal) FROM match) AS overall_max_goals,
   -- Select the max number of goals scored in any match in July
   (SELECT max(home_goal + away_goal) 
    FROM match
    WHERE date IN (
          SELECT date FROM match WHERE EXTRACT(MONTH FROM date) = 07)) AS july_max_goals
FROM match
GROUP BY season;



-- CTE
	-- Set up your CTE
	WITH match_list AS (
	    SELECT 
	  		country_id, 
	  		id
	    FROM match
	    WHERE (home_goal + away_goal) >= 10)
	-- Select league and count of matches from the CTE
	SELECT
	    l.name AS league,
	    COUNT(match_list.id) AS matches
	FROM league AS l
	-- Join the CTE to the league table
	LEFT JOIN match_list 
	ON l.id = match_list.country_id
	GROUP BY l.name;


-- WINDOW FUNCTIONS (you cannot create a query where you mix aggregate (avg(y1)) and
-- not aggregate (y1) columns. Instead of creating a subquery in select, you can
-- use over to make the query understand that you want that aggregated value across 
-- all your rows. It is read after all query's clauses, but before order by.

	SELECT
		date,    
		(home_goal + away_goal) AS goals,
		AVG(home_goal + away_goal) OVER() AS overall_avg
	FROMmatch
	WHERE season = '2011/2012'

-- Use that instead of:
	SELECT
		date,    
		(home_goal + away_goal) AS goals,
		(SELECT
			AVG(home_goal + away_goal) 
			FROM match
			WHERE season = '2011/2012') AS overall_avg
	FROM match
	WHERE season = '2011/2012'


-- WINDOW PARTITIONS. PARTITION BY (in case you can that aggregate function to be 
-- calculated by row!!!!!!!!!!!!

	SELECT
		date,    
		(home_goal + away_goal) AS goals,
		AVG(home_goal + away_goal) OVER(PARTITION BY season) AS season_avg
	FROM match;


-- SLIDING WINDOW (it is used to calculate aggregate data between an specific rows)

	SELECT date,  
		home_goal,  
		away_goal,
		SUM(home_goal) OVER(ORDER BYdate ROWS BETWEEN
			UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total
	FROM match 
	WHERE hometeam_id = 8456 AND season = '2011/2012'

