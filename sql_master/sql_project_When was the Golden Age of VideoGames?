-- Data: https://www.kaggle.com/datasets/holmjason2/videogamedata

-- Task 1: Let's find the ten best-selling video games in game_sales. Select all columns for the top ten best-selling video games (based on games_sold) in game_sales. 
    SELECT * 
    FROM game_sales
    ORDER BY games_sold DESC
    LIMIT 10;

-- Task 2: Join game_sales and reviews. Select a count of the number of games where both critic_score and user_score are null
    SELECT COUNT(game)
    FROM game_sales
    LEFT JOIN reviews
    USING(game)
    WHERE critic_score IS NULL AND user_score IS NULL;

-- Task 3
-- Select release year and average critic score for each year, rounded and aliased
-- Join the game_sales and reviews tables
-- Group by release year
-- Order the data from highest to lowest avg_critic_score and limit to 10 results
    SELECT game_sales.year, ROUND(AVG(reviews.critic_score),2) AS avg_critic_Score
    FROM game_sales
    INNER JOIN reviews
    USING(game)
    GROUP BY year
    ORDER BY avg_critic_score DESC
    LIMIT 10;

-- Task 4:
-- Paste your query from the previous task; update it to add a count of games released in each year called num_games
-- Update the query so that it only returns years that have more than four reviewed games
    SELECT game_sales.year, ROUND(AVG(reviews.critic_score),2) AS avg_critic_Score, COUNT(game_Sales.game) AS num_games
    FROM game_sales
    INNER JOIN reviews
    USING(game)
    GROUP BY year
    HAVING COUNT(game_sales.game) > 4
    ORDER BY avg_critic_score DESC
    LIMIT 10;

-- Task 5:
-- Select the year and avg_critic_score for those years that dropped off the list of critic favourites 
-- Order the results from highest to lowest avg_critic_score
    SELECT year, avg_critic_score
    FROM top_critic_years
    WHERE year NOT IN
        (SELECT year 
        FROM top_critic_years_more_than_four_games)
    ORDER BY avg_critic_score

-- Task 6
-- Select year, an average of user_score, and a count of games released in a given year, aliased and rounded
-- Include only years with more than four reviewed games; group data by year
-- Order data by avg_user_score, and limit to ten results
    SELECT game_sales.year, ROUND(AVG(reviews.user_score),2) AS avg_user_Score, COUNT(game_sales.game) AS num_games
    FROM game_sales
    INNER JOIN reviews
    USING(game)
    GROUP BY year
    HAVING COUNT(game_sales.game) > 4
    ORDER BY avg_user_score DESC
    LIMIT 10;

