-- 游녤游낕 Data Source: https://www.kaggle.com/datasets/holmjason2/videogamedata
-- 游녤游낕 Goal: To determine which years had the best realising videogames both for the critic and the players.

-- 游리 Task 1: 
-- I started finding the top ten best-selling video games in the game_sales dataset.
    SELECT * 
    FROM game_sales
    ORDER BY games_sold DESC
    LIMIT 10;


-- 游리 Task 2: 
-- I selected all columns for the top ten best-selling video games (based on games_sold) in the game_sales dataset and count the games that had no reviews
    SELECT COUNT(game)
    FROM game_sales
    LEFT JOIN reviews
    USING(game)
    WHERE critic_score IS NULL AND user_score IS NULL;

count
31


-- 游리 Task 3
-- I calculated the average critic score for each release year, rounded it, and aliased it. 
-- Then, I joined the game_sales and reviews tables, grouped the data by release year, and ordered it from highest to lowest avg_critic_score, 
-- limiting the results to 10. -- The goal was to know which years video game critics loved
    SELECT game_sales.year, ROUND(AVG(reviews.critic_score),2) AS avg_critic_Score
    FROM game_sales
    INNER JOIN reviews
    USING(game)
    GROUP BY year
    ORDER BY avg_critic_score DESC
    LIMIT 10;

year	avg_critic_score
1990	9.80
1992	9.67
1998	9.32
2020	9.20
1993	9.10
1995	9.07
2004	9.03
1982	9.00
2002	8.99
1999	8.93


-- 游리 Task 4:
-- I took the query from the previous task and modified it to include a count of games released each year, which I named num_games.
-- I filtered the query to return only years with more than four reviewed games only to take data with a significant amount of reviews so our data were not shifted.
    SELECT game_sales.year, ROUND(AVG(reviews.critic_score),2) AS avg_critic_Score, COUNT(game_Sales.game) AS num_games
    FROM game_sales
    INNER JOIN reviews
    USING(game)
    GROUP BY year
    HAVING COUNT(game_sales.game) > 4
    ORDER BY avg_critic_score DESC
    LIMIT 10;

year	avg_critic_score	num_games
1998	9.32	10
2004	9.03	11
2002	8.99	9
1999	8.93	11
2001	8.82	13
2011	8.76	26
2016	8.67	13
2013	8.66	18
2008	8.63	20
2017	8.62	13


-- 游리 Task 5:
-- I retrieved the year and avg_critic_score for the years that were no longer on the list of critic favourites after deleting data with less than 4 reviews.
-- Then, I sorted the results from highest to lowest avg_critic_score.
    SELECT year, avg_critic_score
    FROM top_critic_years
    WHERE year NOT IN
        (SELECT year 
        FROM top_critic_years_more_than_four_games)
    ORDER BY avg_critic_score DESC

year	avg_critic_score
1990	9.80
1992	9.67
2020	9.20
1993	9.10
1995	9.07
1982	9.00


-- 游리 Task 6
--  Now I wanted to know the best games but reviewed by their customers, not just the critics. 
-- So I calculated the average user_score and the number of games released each year, which I aliased and rounded. 
-- I focused only on years with more than four reviewed games, grouped the data by year, and ordered it by avg_user_score, limiting the results to ten.
    SELECT game_sales.year, ROUND(AVG(reviews.user_score),2) AS avg_user_Score, COUNT(game_sales.game) AS num_games
    FROM game_sales
    INNER JOIN reviews
    USING(game)
    GROUP BY year
    HAVING COUNT(game_sales.game) > 4
    ORDER BY avg_user_score DESC
    LIMIT 10;

year	avg_user_score	num_games
1997	9.50	8
1998	9.40	10
2010	9.24	23
2009	9.18	20
2008	9.03	20
1996	9.00	5
2005	8.95	13
2006	8.95	16
2000	8.80	8
2002	8.80	9


-- 游리 Task 7
-- I retrieved the years that appeared in the table of games that the critic loved and the games that the players loved.
    SELECT year
    FROM top_critic_years_more_than_four_games
    INNER JOIN top_user_years_more_than_four_games
    USING (year);

year
1998
2002
2008


-- 游리 Task 8
-- Finally, it was time to calculate the sales in the Best Years of the Videogame
-- I calculated the total games_sold for each year, which I aliased as total_games_sold. Then, I ordered the results accordingly.
    SELECT g.year, SUM(g.games_sold) AS total_games_sold
    FROM game_sales g
    WHERE g.year IN 
        (SELECT year
        FROM top_user_years_more_than_four_games
    INTERSECT
        SELECT year
        FROM top_critic_years_more_than_four_games)
    GROUP BY g.year
    ORDER BY total_games_sold DESC;

year	total_games_sold
2008	175.07
1998	101.52
2002	58.67
.
